#!/usr/bin/env python

import sys, os, subprocess as sp
from enum import Enum

HEADINGS = [
	"-Author",
	"-Name",
	"-Problem_Link",
	"-Code",
	"-Explanation"
]

class Error(Enum):
	OK = 0

	AUTHOR_OMITTED = 1
	AUTHOR_EMPTY = 2

	NAME_OMITTED = 3
	NAME_EMPTY = 4

	PROBLEM_LINK_OMITTED = 5
	PROBLEM_LINK_EMPTY = 6

	CODE_OMITTED = 7
	CODE_EMPTY = 8
	WRONG_CODE_SYNTAX = 9

	EXPLANATION_OMITTED = 10
	EXPLANATION_EMPTY = 11

HOME_DIR = os.getcwd()

modified_files = sp.getoutput("git diff --cached --name-status").splitlines()

def check_validity(line, i, j):
	heading_len = int(len(HEADINGS[j]))

	heading = line[0: heading_len]
	content = line[heading_len + 1:]

	if heading != HEADINGS[j]:
		if i == 0:
			return Error.AUTHOR_OMITTED

		elif j == 1:
			return Error.NAME_OMITTED

		elif j == 2:
			return Error.PROBLEM_LINK_OMITTED

		elif j == 3:
			return Error.CODE_OMITTED

		elif j == 4:
			return Error.EXPLANATION_OMITTED

	elif len(content) == 0:
		if i == 0:
			return Error.AUTHOR_EMPTY

		elif j == 1:
			return Error.NAME_EMPTY

		elif j == 2:
			return Error.PROBLEM_LINK_EMPTY

		elif j == 3:
			return Error.CODE_EMPTY

		elif j == 4:
			return Error.EXPLANATION_EMPTY

	else:
		return Error.OK

for modified_file in modified_files:
	# We only care about the files that were either added or modified.
	if modified_file[0] == 'A' or modified_file[0] == 'M':
		split_path = modified_file[2:].split('/')
		
		if split_path[0] != "hooks" and ".solution" in split_path[len(split_path)-1]:
			filepath = modified_file[2:]
			found_quote = False
			correct_code = False
			f = open(filepath)
			i = 0
			j = 0

			lines = f.readlines()
			for line in lines:
				line = line.rstrip('\n')

				if len(line) != 0 and line[0] == '-':
					return_value = check_validity(line, i, j)
					
					if return_value != Error.OK:
						f.close()
						print(filepath)
						sys.exit(return_value)

					if j == 3 and line[len(line) -1] == "'":
						found_quote = True

					j += 1

				elif len(line) == 1 and line[0] == "'" and found_quote:
					correct_code = True

				i += 1
			
			if not correct_code:
				f.close()
				sys.exit(Error.WRONG_CODE_SYNTAX)

			f.close()

sys.exit(0)
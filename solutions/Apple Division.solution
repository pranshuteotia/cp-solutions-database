-Author Pranshu Teotia

-Name Apple Division

- Problem_Link https://cses.fi/problemset/task/1623

-Code c++'
#include <iostream>
#include <vector>

int main() {
  size_t n;
  std::cin >> n;
  size_t sum = 0;
  std::vector<size_t> apples;

  for(size_t i=0; i<n; ++i) {
    size_t num;
    std::cin >> num;
    sum += num;
    apples.push_back(num);
  }
  size_t max_sum = 0;
  for(size_t i=0; i < (1<<n); ++i) {
    size_t running_sum = 0;
    for(size_t j=0; j<n; ++j) {
      if(i & (1 << j)) {
        running_sum += apples[j];
      }
    }
    if(running_sum <= sum/2) max_sum = std::max(max_sum, running_sum);
  }

  std::cout << sum - 2*max_sum << std::endl;
}
'

-Explanation Since n is quite less we can implement a brute force solution to this proble.
We can generate all subsets of one of the sets then we can take the one with the largest sum
that is less than the sum of all apples/2 and put the remaining apples in the second set and
then finally take their difference.

For example:
If n = 5 
Weight of apples: 3 2 7 4 1
Sum of weights = 17
Sum/2 = 8

All the subsets of 3 2 7 4 1 would be:
$\{\varnothing\}$
$\{1\}, \{2\}, \{3\}, \{4\}, \{7\}$
$\{1, 2\}, \{1, 3\}, \{1, 4\}, \{1, 7\}, \{2, 3\}, \{2, 4\}, \{2, 7\}, \{3, 4\}, \{3, 7\}, \{4, 7\}$
$\{1, 2, 3\}, \{1, 2, 4\}, \{1, 3, 4\}, \{2, 3, 4\}, \{1, 2, 7\}, \{1, 3, 7\}, \{2, 3, 7\}, \{1, 4, 7\}, \{2, 4, 7\}, \{3, 4, 7\}$
$\{1, 2, 3, 4\}, \{1, 2, 3, 7\}, \{1, 2, 4, 7\}, \{1, 3, 4, 7\}, \{2, 3, 4, 7\}$
$\{1, 2, 3, 4, 7\}$

Largest sum <= sum/2 = 8 corresponsding to the set {1, 3, 4}
The sum of the remaining set = 17 - 8 = 9
And the difference is 9 - 8 = 1.